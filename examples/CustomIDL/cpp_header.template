// Autogenerated from cpp_header.template file
#include "attributes/attributes.h"
{% for s in struct.get_structs_of_attributes() %}
#include "{{cpptool.full_path_to_file_name(s)}}"
{% endfor %}
{% for rt in struct.get_raw_types_of_attributes() %}
{% if rt.cpptype and rt.cpptype.including %}
#include {{rt.cpptype.including}}
{% endif %}
{% endfor %}

{% if struct.parent.target_namespace != None %}
{{cpptool.open_namespace(struct.parent)}}
{% endif %}

class {{struct.name}} {
public:
{% if struct.has_adjustable_array_dimensions() %}
    void init(
    {% for attribute in struct.get_attributes_which_affects_size() %}
        const {{ cpptool.fqn(attribute.type) }} &p_{{ attribute.name }} {{ "," if not loop.last }}
    {% endfor %}
    ) {
    {% for attribute in struct.get_attributes_which_affects_size() %}
        this->{{ attribute.name }} = p_{{ attribute.name }};
    {% endfor %}
    {% for attribute in struct.get_arrays_with_adjustable_dimensions() %}
        {{ attribute.name }}.adjust_size();
    {% endfor %}
    }
{% endif %}
{% for attribute in struct.attributes %}
    {% if "ScalarAttribute" in attribute.__class__.__name__ %}
        // -----------------------------
        // {{ attribute.type.name }} {{ attribute.name }} -- affects size: {{ attribute.affects_size() }}
        {% if attribute.affects_size() %}
        attributes::ReadOnlyAttribute<{{cpptool.fqn(attribute.type)}}, {{struct.name}}> {{attribute.name}}{{cpptool.default_value_init_code(attribute)}};
        {% else %}
        attributes::Attribute<{{cpptool.fqn(attribute.type)}}, {{struct.name}}> {{attribute.name}}{{cpptool.default_value_init_code(attribute)}};
        {% endif %}
    {% endif %}
    {% if "ArrayAttribute" in attribute.__class__.__name__ %}
        // -----------------------------
        // array {{ attribute.name }} -- fixed size: {{ attribute.has_fixed_size() }}
        attributes::DynamicArrayAttribute<{{cpptool.fqn(attribute.type)}}, {{struct.name}}, {{attribute.array_sizes|length}}> {{ attribute.name }} = { {
        {% for s in attribute.array_sizes %}
            [this](){ return {{ s.render_formula(separator="->",postfix=".value()")}}; } {{ "," if not loop.last }}
        {% endfor %}
        } };
    {% endif %}
{% endfor %}

};

{% if struct.parent.target_namespace != None %}
{{cpptool.close_namespace(struct.parent)}}
{% endif %}

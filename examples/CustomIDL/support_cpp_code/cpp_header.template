// Autogenerated from cpp_header.template file
#include "attributes/attributes.h"
{% for s in struct.get_structs_of_attributes() %}
#include "{{cpptool.full_path_to_file_name(s)}}"
{% endfor %}
{% for rt in struct.get_raw_types_of_attributes() %}
{% if rt.cpptype and rt.cpptype.including %}
#include {{rt.cpptype.including}}
{% endif %}
{% endfor %}

{% if struct.parent.target_namespace != None %}
{{cpptool.open_namespace(struct.parent)}}
{% endif %}

class {{struct.name}} {
public:
    // =======================================================
    // Meta Data
    // =======================================================
    /** Meta info for attributes of {{ struct.name }} */
    struct AttributeMetaInfos {
    {% for attribute in struct.attributes %}
        /** Meta info for {{ struct.name }}::{{attribute.name}} */
        struct {{attribute.name}} {
            static constexpr const char* name() { return "{{attribute.name}}"; }
            static constexpr const char* type_name() { return "{{attribute.type.name}}"; }
        };
    {% endfor %}
    };
    /** Meta info for {{ struct.name }} */
    struct MetaInfo {
        static constexpr const char* type_name() { return "{{struct.name}}"; }
    };
{% if struct.has_adjustable_array_dimensions() %}
    void init(
    {% for attribute in struct.get_attributes_which_affects_size() %}
        const {{ cpptool.fqn(attribute.type) }} &p_{{ attribute.name }} {{ "," if not loop.last }}
    {% endfor %}
    ) {
    {% for attribute in struct.get_attributes_which_affects_size() %}
        this->{{ attribute.name }} = p_{{ attribute.name }};
    {% endfor %}
    {% for attribute in struct.get_arrays_with_adjustable_dimensions() %}
        {{ attribute.name }}.adjust_size();
    {% endfor %}
    }
{% endif %}

    // =======================================================
    // Data
    // =======================================================
{% for attribute in struct.attributes %}
{% if "ScalarAttribute" in attribute.__class__.__name__ %}
    /** scalar attribute {{ attribute.name }} -- affects size: {{ attribute.affects_size() }} */
    {% if attribute.affects_size() %}
    attributes::ReadOnlyAttribute<AttributeMetaInfos::{{attribute.name}}, {{cpptool.fqn(attribute.type)}}, {{struct.name}}> {{attribute.name}}{{cpptool.default_value_init_code(attribute)}};
    {% else %}
    attributes::Attribute<AttributeMetaInfos::{{attribute.name}}, {{cpptool.fqn(attribute.type)}}, {{struct.name}}> {{attribute.name}}{{cpptool.default_value_init_code(attribute)}};
    {% endif %}
{% endif %}
{% if "ArrayAttribute" in attribute.__class__.__name__ %}
    /** array attribute {{ attribute.name }} -- fixed size: {{ attribute.has_fixed_size() }}
      * dimensions:
    {% for d in attribute.array_dimensions %}
      * - {{ d.get_array_index_name() }}
    {% endfor %}
      */
    attributes::DynamicArrayAttribute<AttributeMetaInfos::{{attribute.name}}, {{cpptool.fqn(attribute.type)}}, {{struct.name}}, {{attribute.array_dimensions|length}}> {{ attribute.name }} = { {
    {% for s in attribute.array_dimensions %}
        [this](){ return {{ s.array_size.render_formula(separator="->",postfix=".value()")}}; } {{ "," if not loop.last }}
    {% endfor %}
    } };
{% endif %}
{% endfor %}

    // =======================================================
    // Visitor stuff
    // =======================================================
    /**
     * const visitor
     * @param visitor
     */
    template<class Visitor>
    void accept(Visitor &visitor) const {
{% for attribute in struct.attributes %}
    {% if "ScalarAttribute" in attribute.__class__.__name__ %}
        {% if attribute.has_raw_type() %}
        visitor.template visitRawTypeScalar<AttributeMetaInfos::{{attribute.name}}>( *this, {{attribute.name}}.value() );
        {% else %}
        visitor.template visitStructuredScalar<AttributeMetaInfos::{{attribute.name}}>( *this, {{attribute.name}}.value() );
        {% endif %}
    {% endif %}
    {% if "ArrayAttribute" in attribute.__class__.__name__ %}
        {% if attribute.has_raw_type() %}
        visitor.template visitRawTypeArray<AttributeMetaInfos::{{attribute.name}}>( *this, {{attribute.name}}.value() );
        {% else %}
        visitor.template visitStructuredArray<AttributeMetaInfos::{{attribute.name}}>( *this, {{attribute.name}}.value() );
        {% endif %}
    {% endif %}
{% endfor %}
    }
    /**
     * init visitor
     * @param visitor
     */
    template<class Visitor>
    void accept_and_init(Visitor &visitor) {
{% for attribute in struct.attributes %}
    {% if "ScalarAttribute" in attribute.__class__.__name__ %}
        {% if attribute.has_raw_type() %}
        visitor.template visitRawTypeScalar<AttributeMetaInfos::{{attribute.name}}>( *this, {{attribute.name}}.value() );
        {% else %}
        visitor.template visitStructuredScalar<AttributeMetaInfos::{{attribute.name}}>( *this, {{attribute.name}}.value() );
        {% endif %}
    {% endif %}
    {% if "ArrayAttribute" in attribute.__class__.__name__ %}
        {% if not attribute.has_fixed_size() %}
        {{ attribute.name }}.adjust_size();
        {% endif %}
        {% if attribute.has_raw_type() %}
        visitor.template visitRawTypeArray<AttributeMetaInfos::{{attribute.name}}>( *this, {{attribute.name}}.value() );
        {% else %}
        visitor.template visitStructuredArray<AttributeMetaInfos::{{attribute.name}}>( *this, {{attribute.name}}.value() );
        {% endif %}
    {% endif %}
{% endfor %}
    }

};

{% if struct.parent.target_namespace != None %}
{{cpptool.close_namespace(struct.parent)}}
{% endif %}

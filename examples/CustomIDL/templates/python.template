# Autogenerated from python.template file
from attributes.attributes import ReadOnlyAttribute, Attribute, DynamicArrayAttribute
{% for s in struct.get_structs_of_attributes() %}
import {{pytool.the_package(s)}}
{% endfor %}
{% for rt in struct.get_raw_types_of_attributes() %}
{% if rt.pythontype and rt.pythontype.fromlib %}
import {{rt.pythontype.fromlib}} # {{rt.name}}
{% endif %}
{% endfor %}

class {{struct.name}}(object):
    def __init__(self):
{% for attribute in struct.attributes %}
{% if "ScalarAttribute" in attribute.__class__.__name__ %}
        # scalar attribute {{ attribute.name }} -- affects size: {{ attribute.affects_size() }}
        {% if attribute.affects_size() %}
        self.{{attribute.name}} = ReadOnlyAttribute( {{pytool.typename(attribute.type)}}, {{pytool.default_value_init_code(attribute)}} )
        {% else %}
        self.{{attribute.name}} = Attribute( {{pytool.typename(attribute.type)}}, {{pytool.default_value_init_code(attribute)}} )
        {% endif %}
{% endif %}
{% if "ArrayAttribute" in attribute.__class__.__name__ %}
        # array attribute {{ attribute.name }} -- fixed size: {{ attribute.has_fixed_size() }}
        #    dimensions:
        {% for d in attribute.array_dimensions %}
        #    - {{ d.get_array_index_name() }}
        {% endfor %}
        self.{{attribute.name}} = DynamicArrayAttribute( {{pytool.typename(attribute.type)}}, [
        {% for s in attribute.array_dimensions %}
            lambda: {{ s.array_size.render_formula(separator=".",postfix="",prefix="self.")}} {{ "," if not loop.last }}
        {% endfor %}
        ])
{% endif %}
{% endfor %}

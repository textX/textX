# Autogenerated from python.template file
from attributes.attributes import ReadOnlyAttribute, Attribute, DynamicArrayAttribute, BaseStruct
{% for s in struct.get_structs_of_attributes() %}
import {{pytool.the_package(s)}}
{% endfor %}
{% for rt in struct.get_raw_types_of_attributes() %}
{% if rt.pythontype and rt.pythontype.fromlib %}
import {{rt.pythontype.fromlib}} # {{rt.name}}
{% endif %}
{% endfor %}

class {{struct.name}}(BaseStruct):
    def __init__(self, read_only=False):
        super({{struct.name}}, self).__init__()
{% for attribute in struct.attributes %}
{% if "ScalarAttribute" in attribute.__class__.__name__ %}
        # scalar attribute {{ attribute.name }} -- affects size: {{ attribute.affects_size() }}
        {% if attribute.affects_size() %}
        self.__dict__["{{attribute.name}}"] = ReadOnlyAttribute( {{pytool.typename(attribute.type)}}, {{pytool.default_value_init_code(attribute, True)}}, {{pytool.get_meta_info(attribute)}} )
        {% else %}
        if read_only:
            self.__dict__["{{attribute.name}}"] = ReadOnlyAttribute( {{pytool.typename(attribute.type)}}, {{pytool.default_value_init_code(attribute)}}, {{pytool.get_meta_info(attribute)}} )
        else:
            self.__dict__["{{attribute.name}}"] = Attribute( {{pytool.typename(attribute.type)}}, {{pytool.default_value_init_code(attribute)}}, {{pytool.get_meta_info(attribute)}} )
        {% endif %}
{% endif %}
{% if "ArrayAttribute" in attribute.__class__.__name__ %}
        # array attribute {{ attribute.name }} -- fixed size: {{ attribute.has_fixed_size() }}
        #    dimensions:
        {% for d in attribute.array_dimensions %}
        #    - {{ d.get_array_index_name() }}
        {% endfor %}
        self.__dict__["{{attribute.name}}"] = DynamicArrayAttribute( {{pytool.typename(attribute.type)}}, [
        {% for s in attribute.array_dimensions %}
            lambda: {{ s.array_size.render_formula(separator=".",postfix="",prefix="self.")}} {{ "," if not loop.last }}
        {% endfor %}
        ], {{pytool.get_meta_info(attribute)}})
{% endif %}
{% endfor %}

{% if struct.has_adjustable_array_dimensions() %}
    def init( self,
    {% for attribute in struct.get_attributes_which_affects_size() %}
        p_{{ attribute.name }} {{ "," if not loop.last }}
    {% endfor %}
    ):
    {% for attribute in struct.get_attributes_which_affects_size() %}
        self._set_value("{{ attribute.name }}", p_{{ attribute.name }})
    {% endfor %}
    {% for attribute in struct.get_arrays_with_adjustable_dimensions() %}
        self.__dict__["{{ attribute.name }}"]._adjust_size();
    {% endfor %}
{% endif %}

    def accept( self, visitor ):
{% for attribute in struct.attributes %}
    {% if "ScalarAttribute" in attribute.__class__.__name__ %}
        {% if attribute.has_raw_type() %}
        visitor.visitRawTypeScalar( self, "{{attribute.name}}", self.__dict__["{{attribute.name}}"]._meta_info );
        {% else %}
        visitor.visitStructuredScalar( self, "self.{{attribute.name}}", self.__dict__["{{attribute.name}}"]._meta_info );
        {% endif %}
    {% endif %}
    {% if "ArrayAttribute" in attribute.__class__.__name__ %}
        {% if attribute.has_raw_type() %}
        visitor.visitRawTypeArray( self, "{{attribute.name}}", self.__dict__["{{attribute.name}}"]._meta_info );
        {% else %}
        visitor.visitStructuredArray( self, "self.{{attribute.name}}", self.__dict__["{{attribute.name}}"]._meta_info );
        {% endif %}
    {% endif %}
{% endfor %}

    def accept_and_init( self, visitor ):
{% for attribute in struct.attributes %}
    {% if "ScalarAttribute" in attribute.__class__.__name__ %}
        {% if attribute.has_raw_type() %}
        visitor.visitRawTypeScalar( self, "{{attribute.name}}", self.__dict__["attribute.name"]._meta_info );
        {% else %}
        visitor.visitStructuredScalar( self, "self.{{attribute.name}}", self.__dict__["{{attribute.name}}"]._meta_info );
        {% endif %}
    {% endif %}
    {% if "ArrayAttribute" in attribute.__class__.__name__ %}
        {% if not attribute.has_fixed_size() %}
        self.__dict__["{{ attribute.name }}"]._adjust_size();
        {% endif %}
        {% if attribute.has_raw_type() %}
        visitor.visitRawTypeArray( self, "{{attribute.name}}", self.__dict__["{{attribute.name}}"]._meta_info );
        {% else %}
        visitor.visitStructuredArray( self, "self.{{attribute.name}}" , self.__dict__["{{attribute.name}}"]._meta_info);
        {% endif %}
    {% endif %}
{% endfor %}

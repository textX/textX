// Autogenerated from cpp_header.template file
#include "attributes/attributes.h"
{% for s in struct.get_structs_of_attributes() %}
#include "{{cpptool.full_path_to_file_name(s)}}"
{% endfor %}
{% for rt in struct.get_raw_types_of_attributes() %}
{% if rt.cpptype and rt.cpptype.including %}
#include {{rt.cpptype.including}}
{% endif %}
{% endfor %}

{% if struct.parent.target_namespace != None %}
{{cpptool.open_namespace(struct.parent)}}
{% endif %}

class {{struct.name}} {
{% for attribute in struct.attributes %}
    {% if "ScalarAttribute" in attribute.__class__.__name__ %}
        // -----------------------------
        // SCALAR {{ attribute.name }}
        // {{ attribute.type.name }} {{ attribute.name }} -- affects size: {{ attribute.affects_size() }}
        {% if attribute.affects_size() %}
        attributes::ReadOnlyAttribute<{{cpptool.fqn(attribute.type)}}, {{struct.name}}> {{attribute.name}}{{cpptool.default_value_init_code(attribute)}};
        {% else %}
        attributes::Attribute<{{cpptool.fqn(attribute.type)}}, {{struct.name}}> {{attribute.name}}{{cpptool.default_value_init_code(attribute)}};
        {% endif %}
    {% endif %}
    {% if "ArrayAttribute" in attribute.__class__.__name__ %}
        // -----------------------------
        // ARRAY {{ attribute.name }}
        // FIXED SIZE: {{ attribute.array_size.has_fixed_size() }}
        attributes::DynamicArrayAttribute<{{cpptool.fqn(attribute.type)}}, {{struct.name}}, 1> {{ attribute.name }} = { {
            [this](){ return {{ attribute.array_size.render_formula(separator="->",postfix=".value()")}} },
        } }
    {% endif %}
{% endfor %}

};

{% if struct.parent.target_namespace != None %}
{{cpptool.close_namespace(struct.parent)}}
{% endif %}
